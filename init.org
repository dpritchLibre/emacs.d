#+TITLE: Emacs Configuration
#+AUTHOR: David Pritchard
#+PROPERTY: header-args :tangle yes :tangle init.el

#+LaTeX_HEADER: \usepackage[margin=1in]{geometry}
#+LaTeX_HEADER: \usepackage[x11names]{xcolor}
#+LaTeX_HEADER: \hypersetup{linktoc = all, colorlinks = true, urlcolor = DodgerBlue4, citecolor = PaleGreen1, linkcolor = black}

#+BEGIN_LaTeX
% background color for code environments
\definecolor{lightyellow}{RGB}{255,255,224}
\definecolor{lightbrown}{RGB}{249,234,197}

% create a listings environment for elisp
\lstset{%
  language=Lisp,
  backgroundcolor=\color{lightyellow},
  basicstyle=\fontsize{10}{11}\fontfamily{pcr}\selectfont,
  keywordstyle=\color{Firebrick3},
  stringstyle=\color{Green4},
  showstringspaces=false,
  commentstyle=\color{Purple3}
  % frame=lines
}
#+END_LaTeX


* Configuration

TODO: description

** Basic Configuration

*** Set up the package management system

There are several Emacs package archives that can be used to download and update
packages from.  Emacs comes bundled with a package manager called =package.el=,
which does the job of connecting to these archives and handling package
downloads, managing dependencies, and so on.  Most notably, it includes the
functions =package-list-packages= and =package-install=.  See
http://wikemacs.org/wiki/Package.el for more details regarding =package.el=, and
see https://emacs.stackexchange.com/q/268/ for a description of the various
package archives.

The following code was taken from
http://cachestocaches.com/2015/8/getting-started-use-package/.  Some open
questions about this code remain:
  * What does =package-initialize= do?  Autoload?
  * What does the line =(setq package-enable-at-startup nil)= do?
  * How does =require= know where to find =package=?
  * Why do we need the call to =eval-when-compile=?

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+END_SRC




** Redefine customization storage approach

Eamcs by default appends configuration information to your startup file.  For
example, if you use the "Easy customization interface" (through =M-x customize=
or by some other means), then your customizations are made permanent across
Emacs instances by using this approach.  There are other ways that
customizations can show up as well: for example =package.el= uses it to store a
list of user-installed packages.

However, there is something disagreeable about mixing user-written code and
automatically generated code.  Furthermore, since the startup file is tangled
from this Org file, we have no choice but to separate the automatically
generated code to prevent it from being overwritten every time we tangle a new
file.  This is what is done in the following code block.

#+BEGIN_SRC emacs-lisp
  ;; direct Emacs to reflect future changes by updating the custom file
  (setq custom-file "~/.emacs.d/custom.el")
  ;; load the existing file
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC




** macOS-specific settings

#+BEGIN_SRC emacs-lisp
  ;; ;; an example of how to rewrite the following using use-package.  Lifted from
  ;; ;; the use-package GitHub README.md.
  ;; (use-package exec-path-from-shell
  ;;   :if (memq window-system '(mac ns))
  ;;   :ensure t
  ;;   :config
  ;;   (exec-path-from-shell-initialize))

  (when (eq system-type 'darwin)
    ;; change the meta key to use `command`
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier nil)
    ;; ensure that paths set from shell initialization files are added to PATH
    (use-package exec-path-from-shell
      :config
      (exec-path-from-shell-initialize))
    ;; ;; BSD ls doesn't support --dired option.  See stackoverflow.com/q/25125200
    ;; (setq dired-use-ls-dired nil)
    ;; ;; add local directory on remote for tramp's internal PATH.  See
    ;; ;; https://www.gnu.org/software/emacs/manual/html_node/tramp/Remote-programs.html
    ;; ;; https://emacs.stackexchange.com/q/24264
    ;; (require 'tramp)
    ;; (add-to-list 'tramp-remote-path "/home/dpritchard/.local/bin")
    )
#+END_SRC




** Load non-ELPA code

#+BEGIN_SRC emacs-lisp
  (load (expand-file-name "~/.emacs.d/lisp/fill-line-with-hyphens.el"))
  (load (expand-file-name "~/.emacs.d/lisp/info-open.el"))
  (load (expand-file-name "~/.emacs.d/lisp/pinned-buffer-mode.el"))
#+END_SRC




** Emacs config

Basic configurations

#+BEGIN_SRC emacs-lisp
  ;; has the effect of adding `:ensure t` to every `use-package` call
  (setq use-package-always-ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; list of values that are considered safe for local variables.  See
  ;; https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Local-Variables.html
  (add-to-list 'safe-local-variable-values '(before-save-hook))
  (add-to-list 'safe-local-variable-values '(prog-mode-hook . #'ws-butler-mode))

  ;; ;; enable Emacs Lisp Package Archive
  ;; (require 'package)
  ;; (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  ;; display column number
  (setq column-number-mode t)

  ;; set default fill column number
  (setq-default fill-column 80)

  ;; inserting text deletes selected text
  (delete-selection-mode t)

  ;; delete trailing whitespace when saving files
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;; see https://github.com/lewang/ws-butler
  (use-package ws-butler
    :ensure t)

  ;; disable graphical toolbar at the top of the screen
  (tool-bar-mode -1)

  ;; disable the scroll bar
  (scroll-bar-mode -1)

  ;; disable alarm bell.  This is a sound that Emacs makes when you try to do
  ;; something wrong, such as trying to scroll past the beginning or end of a
  ;; buffer.
  (setq ring-bell-function 'ignore)

  ;; allow more entries in the kill ring.  The default is 60.
  (setq kill-ring-max 250)

  ;; send backups to `~/.emacs.d/backups` rather than saving in the same directory
  ;; as the file being backed up
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

  ;; stop saving autosave and lockfiles
  ;; http://ergoemacs.org/emacs/emacs_set_backup_into_a_directory.html.  Also
  ;; consider `(setq create-lockfiles nil)`
  (setq auto-save-default nil)

  ;; save history between Emacs instances.  From
  ;; http://www.wisdomandwonder.com/wp-content/uploads/2014/03/C3F.html
  (setq savehist-file "~/.emacs.d/savehist")
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))

  ;; cc mode tab size 4 spaces
  (setq-default c-basic-offset 4)

  ;; use spaces instead of tabs for indenting
  (setq-default indent-tabs-mode nil)

  ;; so that compiler directives are properly indented
  (c-set-offset (quote cpp-macro) 0 nil)

  ;; change comments to `//` instead of `/* ... */`
  (add-hook 'c-mode-hook (lambda () (setq comment-start "//"
                                          comment-end   "")))

  ;; ;; show matching parentheses
  ;; (show-paren-mode 1)

  ;; default to truncate lines
  (set-default 'truncate-lines t)

  ;; type "y" or "n" instead of "yes" or "no"
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; press C-SPC repeatedly after C-u C-SPC to repeatedly pop mark
  (setq set-mark-command-repeat-pop t)

  ;; remove `C-;` keybinding for `flyspell-auto-correct-previous-word` since we
  ;; use it for global keybinding to avy, and remove `C-M-i` since we use it for
  ;; global keybinding to `iedit-mode`
  (eval-after-load "flyspell"
    '(progn
       (define-key flyspell-mode-map (kbd "C-;") nil)
       (define-key flyspell-mode-map (kbd "C-M-i") nil)))
#+END_SRC


** Keybindings

Remove the prefix key keybindings.  From
http://pragmaticemacs.com/emacs/use-your-digits-and-a-personal-key-map-for-super-shortcuts/.
You can still use =C-M-1=, =C-M-2=, etc. for this purpose.  Move this somewhere
else if it sticks (i.e. if I don't find myself missing the keys).
#+BEGIN_SRC emacs-lisp
  ;; ;; unset C- and M- digit keys
  ;; (dotimes (n 10)
  ;;   (global-unset-key (kbd (format "C-%d" n)))
  ;;   (global-unset-key (kbd (format "M-%d" n))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; add / change keybindings.  See https://github.com/abo-abo/ace-window for
;; details regarding ace-window
(global-set-key (kbd "M-o") 'ace-window)
;; (global-set-key (kbd "C-;") 'other-window)
;; (global-set-key (kbd "C-M-;") 'previous-multiframe-window)
(global-set-key (kbd "C-9") 'previous-buffer)
(global-set-key (kbd "C-0") 'next-buffer)
(global-set-key (kbd "M-[") 'scroll-down-line)
(global-set-key (kbd "M-]") 'scroll-up-line)
(global-set-key (kbd "C-.") 'xref-find-definitions-other-window)
(global-set-key (kbd "C-x C-k") 'kill-this-buffer)
(global-set-key [remap just-one-space] 'cycle-spacing)

;; crux shortcuts.  See https://github.com/bbatsov/crux
(global-set-key (kbd "C-c I") #'crux-find-user-init-file)
(global-set-key [remap kill-whole-line] #'crux-kill-whole-line)  ; places point at the correct indentation after deletion
(global-set-key (kbd "C-S-k") #'crux-kill-line-backwards)
(global-set-key [(shift return)] #'crux-smart-open-line)           ; doesn't change any test on current line before starting a new line below and moving point
(global-set-key (kbd "C-S-<return>") #'crux-smart-open-line-above) ; doesn't change any test on current line before starting a new line above and moving point
(global-set-key (kbd "C-c d") #'crux-duplicate-current-line-or-region)
(global-set-key (kbd "C-c M-d") #'crux-duplicate-and-comment-current-line-or-region)


;; change info mode keybindings.  By default `n` and `p` go to the next and
;; previous node which always causes me problems.  This changes them to scroll
;; between links.
(progn
  (define-key Info-mode-map (kbd "n") 'Info-next-reference)
  (define-key Info-mode-map (kbd "p") 'Info-prev-reference))
#+END_SRC


Install =crux=.  See https://github.com/bbatsov/crux/.
TODO: incorporate crux keybindings from above here.
#+BEGIN_SRC emacs-lisp
  (use-package crux)
#+END_SRC

Install =hydra=.  See https://github.com/abo-abo/hydra/.

#+BEGIN_SRC emacs-lisp
  (use-package hydra)
#+END_SRC


Personal library

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C--") #'dp-fill-line-with-hyphens)
#+END_SRC




*** Evil mode

#+BEGIN_SRC emacs-lisp
  ;; (use-package evil-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (use-package evil-escape
  ;;   :config
  ;;   (setq-default evil-escape-key-sequence "kj"))
#+END_SRC




** Appearance

*** Font size

#+BEGIN_SRC emacs-lisp
;; set default font size. Specifies font height in units of 1/10 pt
(set-face-attribute 'default nil :height 110)
#+END_SRC


*** Theme

#+BEGIN_SRC emacs-lisp
  ;; specify custom themes directory
  (setq custom-theme-directory "~/.emacs.d/themes/")
  ;; (load-theme 'blippblopp t)

  ;; specify theme.  See https://stackoverflow.com/a/26555466/5518304 for region
  ;; color modification.  TODO: this changes the face for all themes?  Can it be
  ;; incorporated into the zenburn-specific code in the following code block?
  (use-package zenburn-theme
    :config
    (load-theme 'zenburn t)
    (set-face-attribute 'region nil :background "#666" :foreground "#ffffff"))

  ;; See https://emacs.stackexchange.com/q/20608/15552 for
  (with-eval-after-load "zenburn-theme"
    (zenburn-with-color-variables
      (custom-theme-set-faces
       'zenburn
       ;; original `(default ((t (:foreground ,zenburn-fg :background ,zenburn-bg))))
       `(default ((t (:foreground ,zenburn-fg :background ,zenburn-bg-05)))))))
#+END_SRC


*** rainbow-delimiters

Adds highlighting to delimiters such as parenthesis to visually indicate pairs
of matching delimiters.  See https://github.com/Fanael/rainbow-delimiters/.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :init (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC


*** Modeline

Update [2019-01-07 Mon]: changed Minions + Moody to doom-modeline.

#+BEGIN_SRC emacs-lisp
  ;; ;; modeline config.  See https://github.com/tarsius/minions and
  ;; ;; https://github.com/tarsius/moody
  ;; (use-package minions
  ;;   :config
  ;;   (minions-mode 1))
  ;; (use-package moody
  ;;   :config
  ;;   (setq x-underline-at-descent-line t)
  ;;   (moody-replace-mode-line-buffer-identification)
  ;;   (moody-replace-vc-mode))
  ;; ;; set the height of the mode line in pixels.  Default is 30.
  ;; (customize-set-value 'moody-mode-line-height 14)
#+END_SRC

Note that for all of the icons to display properly, you have to first run the
command =M-x all-the-icons-install-fonts= (this takes a minute or so to
perform).  See https://github.com/seagle0128/doom-modeline/ for details.

It is also suggested by the author of =doom-modeline= to use =doom-themes= (I
haven't done so yet).  See https://github.com/hlissner/emacs-doom-themes/.
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :defer t
    :hook (after-init . doom-modeline-init))
#+END_SRC

I've also tried =spaceline=.
#+BEGIN_SRC emacs-lisp
  ;; (use-package spaceline
  ;;   :demand t
  ;;   :init
  ;;   (setq powerline-default-separator 'arrow-fade)
  ;;   :config
  ;;   (require 'spaceline-config)
  ;;   (spaceline-spacemacs-theme))
#+END_SRC




*** all-the-icons

Note that you have to run =M-x all-the-icons-install-fonts= in order to actually
install the fonts.

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons :defer 0.5)
#+END_SRC


*** golden-ratio

See https://github.com/roman/golden-ratio.el.  Code borrowed from
https://github.com/roman/golden-ratio.el/issues/68.
#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio
    :config
    (define-advice select-window (:after (window &optional no-record) golden-ratio-resize-window)
      (golden-ratio)
      nil))
#+END_SRC




** Remote connections

*** Tramp

Use the remote's values for =PATH= rather than the values that Tramp tries to
set for it.  Note that for some reason, adding entries to =tramp-remote-path=
doesn't have any effect for me.  However, most of the time the value for =PATH=
set by the startup files on the remote is what I want anyway.  To do this, you
can simply add the symbol =tramp-remote-path= to the front of
=tramp-remote-path=, which acts as a sentinal value (and ignores the other
values behind it).

Note that the shell used by Tramp is by default the shell called by =/bin/sh=,
so the startup is different than for Bash.  In particular it will invoke
=.profile= rather than =.bashrc= or =.bash_profile=.

As previously mentioned, I wasn't able to have any effect on the value of =PATH=
on the remote by any other means.  I tried using a command such as =(add-to-list
'tramp-remote-path "/some/path")=, using =(setq tramp-remote-path (cdr
tramp-remote-path))= (in order to remove the leading =tramp-default-remote-path=
symbol from the default value), and deleting =.emacs.d/tramp=.  None of these
had any effect.

For more detail, see the following links:
  * https://www.gnu.org/software/emacs/manual/html_node/tramp/Remote-programs.html
  * https://www.gnu.org/software/emacs/manual/html_node/tramp/Connection-caching.html#Connection-caching
  * https://stackoverflow.com/questions/26630640/tramp-ignores-tramp-remote-path

#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :config
    (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
#+END_SRC

* Auto-complete and textual substitution

** company mode

Enable company mode in all buffers.  See http://company-mode.github.iol

#+BEGIN_SRC emacs-lisp
  (use-package company
    :bind (:map company-active-map
                ("C-n" . company-select-next)
                ("C-p" . company-select-previous))
    :init
    (global-company-mode)
    :config
    ;; loops around suggestions
    (setq company-idle-delay 0.2)
    (setq company-minimum-prefix-length 2)

    ;; (if (display-graphic-p)
    ;;     (define-key company-active-map [tab] 'company-select-next)
    ;;   (define-key company-active-map (kbd "C-i") 'company-select-next))
    )

  ;; (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC


Add =company= completion backends to AUCTeX.

#+BEGIN_SRC emacs-lisp
  (use-package company-math
    :config
    (add-to-list 'company-backends 'company-math-symbols-latex)
    (add-to-list 'company-backends 'company-math-symbols-unicode)
    (add-to-list 'company-backends 'company-math-symbols-commands))
#+END_SRC


** yasnippet

Enable yasnippet mode in all buffers.  See
https://github.com/joaotavora/yasnippet.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode 1))

  ;; ;; enable yasnippet mode in all buffers.  See
  ;; ;; https://github.com/joaotavora/yasnippet
  ;; (require 'yasnippet)
  ;; (yas-global-mode 1)
#+END_SRC




** auto-yasnippet

Enable temporary snippets.  See https://github.com/abo-abo/auto-yasnippet.
#+BEGIN_SRC emacs-lisp
  (use-package auto-yasnippet
    :config
    (global-set-key (kbd "M-g M-p") #'aya-create)
    (global-set-key (kbd "M-g M-o") #'aya-expand))
#+END_SRC


This doesn't seem to work at all for me?  Taken from
https://www.reddit.com/r/emacs/comments/8rxm7h/tip_how_to_better_manage_your_spelling_mistakes/

#+BEGIN_SRC emacs-lisp
  (use-package abbrev
    :defer 1
    :ensure nil
    :custom
    (abbrev-file-name (expand-file-name "abbrev_defs" user-emacs-directory))
    (abbrev-mode 1)
    :config
    (if (file-exists-p abbrev-file-name)
        (quietly-read-abbrev-file)))

  (use-package flyspell
    :defer 1
    :custom
    (flyspell-abbrev-p t)
    (flyspell-issue-message-flag nil)
    (flyspell-issue-welcome-flag nil)
    (flyspell-mode 1))

  ;; TODO: create a different binding for `flyspell-correct-word-generic`
  (use-package flyspell-correct-ivy
    :after flyspell
    ;; :bind (:map flyspell-mode-map
    ;;        ("C-;" . flyspell-correct-word-generic))
    :custom (flyspell-correct-interface 'flyspell-correct-ivy))

  (defhydra hydra-spelling (:color blue)
    "
    ^
    ^Spelling^          ^Errors^            ^Checker^
    ^--------^----------^------^------------^-------^-------
    _q_ quit            _<_ previous        _c_ correction
    ^^                  _>_ next            _d_ dictionary
    ^^                  _f_ check           _m_ mode
    ^^                  ^^                  ^^
    "
    ("q" nil)
    ("<" flyspell-correct-previous :color pink)
    (">" flyspell-correct-next :color pink)
    ("c" ispell)
    ("d" ispell-change-dictionary)
    ("f" flyspell-buffer)
    ("m" flyspell-mode))
#+END_SRC




* Files and buffers

** Dired settings

#+BEGIN_SRC emacs-lisp
;; enables some additional features for dired, such as omitting uninteresting
;; files (bound to C-x M-o).  See
;; https://www.gnu.org/software/emacs/manual/html_mono/dired-x.html
(require 'dired-x)

;; dired settings
(setq-default
 dired-auto-revert-buffer t
 dired-dwim-target t
 dired-listing-switches "-alh --group-directories-first")
#+END_SRC




** Sunrise commander

See the following for info:
  * https://www.emacswiki.org/emacs/Sunrise_Commander
  * https://github.com/escherdragon/sunrise-commander
  * https://medium.com/@enzuru/sunrise-commander-an-orthodox-file-manager-for-emacs-2f92fd08ac9e
  * http://pragmaticemacs.com/emacs/double-dired-with-sunrise-commander/

Use the commands =sunrise= or =sunrise-cd= to start.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/other-packages/sunrise-commander")

  (require 'sunrise-commander)
  (require 'sunrise-x-buttons)
  (require 'sunrise-x-modeline)

  (add-to-list 'auto-mode-alist '("\\.srvm\\'" . sr-virtual-mode))
#+END_SRC




** Ibuffer settings

#+BEGIN_SRC emacs-lisp
  ;; use Ibuffer for Buffer List
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  ;; groups Ibuffer entries.  See https://www.emacswiki.org/emacs/IbufferMode for
  ;; more details.
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("R" (mode . ess-r-mode))
                 ("Python" (mode . python-mode))
                 ("C/C++" (or (mode . c-mode)
                              (mode . c++-mode)))
                 ("LaTeX" (or (mode . latex-mode)
                              (mode . bibtex-mode)))
                 ("shell" (mode . sh-mode))
                 ("Lisp" (or (mode . lisp-mode)
                             (mode . scheme-mode)))
                 ("emacs" (or (mode . lisp-interaction-mode)
                              (mode . emacs-lisp-mode)))
                 ("dired" (mode . dired-mode))
                 ("processes" (or (mode . inferior-ess-r-mode)
                                  (mode . inferior-ess-mode)
                                  (mode . inferior-python-mode)
                                  (mode . term-mode)
                                  (mode . shell-mode)
                                  (mode . slime-repl-mode)
                                  (mode . geiser-repl-mode)))
                 ("Org" (mode . org-mode))
                 ("documentation" (or (mode . Info-mode)
                                      (mode . helpful-mode)
                                      (mode . Man-mode)
                                      (mode . ess-r-help-mode)))))))

  ;; change the width of the first column.  See
  ;; https://emacs.stackexchange.com/a/623/15552
  (setq ibuffer-formats
        '((mark modified read-only " "
                (name 40 40 :left :elide) ; change: the two 40 values were originally 18's
                " "
                (size 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " " filename-and-process)
          (mark " "
                (name 16 -1)
                " " filename)))

  ;; what does this line do?
  (add-hook 'ibuffer-mode-hook
            (lambda () (ibuffer-switch-to-saved-filter-groups "default")))

  ;; Remove the default keybinding for =ibuffer-mode-map= since it conflicts with
  ;; ace-window
  (use-package ibuffer
    :config
    ;; remove keybinding''
    (define-key ibuffer-mode-map (kbd "M-o") nil)

    ;; (setq ibuffer-never-show-predicates nil)
    ;; (add-to-list 'ibuffer-never-show-predicates "\\*help\\[R\\]\\(.*\\)\\[head-tail\\]")
    ;; (add-to-list 'ibuffer-never-show-predicates "\\*help\\[R\\]\\(.*\\)\\*\\[R\\]")
    (setq ibuffer-never-show-predicates
          '("\\*help\\[R\\]\\(.*\\)\\[head-tail\\]"
            "\\*help\\[R\\]\\(.*\\)\\*\\[R\\]")))
#+END_SRC




** Directory tree modes

*** neotree

See
  * https://github.com/jaypei/emacs-neotree
  * https://www.emacswiki.org/emacs/NeoTree

#+BEGIN_SRC emacs-lisp
  ;; use the following command to toggle the display icons: `(setq neo-theme (if
  ;; (display-graphic-p) 'icons 'classic))'

  ;; set up neotree
  (use-package neotree
    :config
    (global-set-key (kbd "<f12>") 'neotree-toggle))
#+END_SRC




*** treemacs

See https://github.com/Alexander-Miller/treemacs/.
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :config
    (treemacs-resize-icons 15)
    (global-set-key (kbd "C-c t") 'treemacs)
    (global-set-key (kbd "C-c C-t") 'treemacs-select-window))
#+END_SRC

Use =treemacs-projectile= which adds the command =treemacs-projectile=, which
gives you an easy interface to add =projectile= projects to =treemacs=.

#+BEGIN_SRC emacs-lisp
  (use-package treemacs-projectile
    :after treemacs projectile)
#+END_SRC




* Moving the cursor

** avy

See https://github.com/abo-abo/avy.  Also see
https://cestlaz.github.io/posts/using-emacs-7-avy/ for the =use-package=
version of these commands.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :config
    (global-set-key (kbd "C-;") 'avy-goto-char)
    (global-set-key (kbd "C-'") 'avy-goto-char-2)
    (global-set-key (kbd "M-g M-g") 'avy-goto-line)
    (global-set-key (kbd "M-g e") 'avy-goto-word-0)
    (global-set-key (kbd "M-g w") 'avy-goto-word-1))
#+END_SRC

Remove conflicting keybindings.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (define-key org-mode-map (kbd "C-'") nil))
#+END_SRC




** ace-window

ace-window keys used for switching.  Default is 0-9.  See
https://github.com/abo-abo/ace-window for details regarding ace-window.
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (setq aw-background nil))
#+END_SRC




** Searching text in files

*** deadgrep

(use-package deadgrep)




* Editing text

** Parentheses

*** paredit

I'm currently considering whether to use =paredit= and / or =smartparens=.
Right now I've commented out =paredit=.

See
https://www.reddit.com/r/emacs/comments/55rwnp/how_does_lispy_paredit_work_for_nonlisp/
for the following suggestion (which I'm not currently following):
#+BEGIN_QUOTE
Don't use =paredit= in non-lisp languages. It is far too strict and you will be
fighting against it most of the time. I use =smartparens-strict-mode= with
=sp-use-paredit-bindings= for non-lisp and =paredit= for lisp.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle no
  ;; `paredit` setup.  See http://wikemacs.org/wiki/Paredit-mode for details
  ;; (autoload 'enable-paredit-mode "paredit"
  ;;   "Turn on pseudo-structural editing of Lisp code."
  ;;   t)
  ;; (add-hook 'emacs-lisp-mode-hook       'enable-paredit-mode)
  ;; (add-hook 'lisp-mode-hook             'enable-paredit-mode)
  ;; (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
  ;; (add-hook 'scheme-mode-hook           'enable-paredit-mode)
  ;; ;; Stop SLIME's REPL from grabbing DEL,
  ;; ;; which is annoying when backspacing over a '('
  ;; (defun override-slime-repl-bindings-with-paredit ()
  ;;   (define-key slime-repl-mode-map
  ;;     (read-kbd-macro paredit-backward-delete-key)
  ;;     nil))
  ;; (add-hook 'slime-repl-mode-hook 'override-slime-repl-bindings-with-paredit)
#+END_SRC


*** smartparens

The main page is located at https://github.com/Fuco1/smartparens/.  Also see:

  - http://ebzzry.io/en/emacs-pairs/
  - https://gist.github.com/pvik/8eb5755cc34da0226e3fc23a320a3c95
  - https://github.com/Fuco1/smartparens/wiki/
  - https://gist.github.com/oantolin/5751fbaa7b8ab4f9570893f2adfe1862

In particular see the above gist for an example of how to overwrite the
=sp-base-key-bindings=.  See =sp-smartparens-bindings= for a list of the
bindings.

Note that =M-<backspace>= is originally mapped to =sp-backward-unwrap-sexp=.  If
this seems important then I might want to add it back in somewhere else.  Also
look into =sp-rewrap-sexp=.

#+BEGIN_SRC emacs-lisp
  (use-package smartparens-config
    :ensure smartparens
    :config
    (show-smartparens-global-mode t)
    (smartparens-strict-mode)
    (setq sp-highlight-pair-overlay nil)
    (custom-set-variables
     ;; '(sp-base-key-bindings 'sp)
     '(sp-override-key-bindings
       '(("M-<backspace>" . nil)))))

  (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
  (add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
#+END_SRC

By default the backtick "`" is paired with a single quote in "'" scheme-mode,
but it shouldn't be since this is used for quasiquotation.
#+BEGIN_SRC emacs-lisp
  (sp-local-pair 'scheme-mode "`" nil :actions :rem)
#+END_SRC


Keybindings for example keybindings
https://github.com/Fuco1/.emacs.d/blob/master/files/smartparens.el
#+BEGIN_SRC emacs-lisp
  ;; override `forward-sexp` and `backward-sexp`
  (define-key smartparens-mode-map (kbd "C-M-f") 'sp-forward-sexp)
  (define-key smartparens-mode-map (kbd "C-M-b") 'sp-backward-sexp)

  (define-key smartparens-mode-map (kbd "M-g M-d") 'sp-down-sexp)
  (define-key smartparens-mode-map (kbd "M-g d") 'sp-backward-down-sexp)
  (define-key smartparens-mode-map (kbd "M-g M-a") 'sp-beginning-of-sexp)
  (define-key smartparens-mode-map (kbd "M-g M-e") 'sp-end-of-sexp)

  (define-key smartparens-mode-map (kbd "M-g M-u") 'sp-up-sexp)
  (define-key smartparens-mode-map (kbd "M-g u") 'sp-backward-up-sexp)
  ;; override `transpose-sexps`
  (define-key smartparens-mode-map (kbd "C-M-t") 'sp-transpose-sexp)

  ;; ;; these don't seem to be commands any more
  ;; (define-key smartparens-mode-map (kbd "C-M-n") 'sp-forward-hybrid-sexp)
  ;; (define-key smartparens-mode-map (kbd "C-M-p") 'sp-backward-hybrid-sexp)

  (define-key smartparens-mode-map (kbd "M-g k") 'sp-kill-sexp)
  (define-key smartparens-mode-map (kbd "C-M-w") 'sp-copy-sexp)

  ;; (define-key smartparens-mode-map (kbd "M-g M-<delete>") 'sp-unwrap-sexp)
  ;; (define-key smartparens-mode-map (kbd "M-g <delete>") 'sp-backward-unwrap-sexp)
  (define-key smartparens-mode-map (kbd "M-g M-<backspace>") 'sp-unwrap-sexp)
  (define-key smartparens-mode-map (kbd "M-g <backspace>") 'sp-backward-unwrap-sexp)

  (define-key smartparens-mode-map (kbd "M-g M-j") 'sp-forward-slurp-sexp)
  (define-key smartparens-mode-map (kbd "M-g M-k") 'sp-forward-barf-sexp)
  (define-key smartparens-mode-map (kbd "M-g M-b") 'sp-backward-slurp-sexp)
  (define-key smartparens-mode-map (kbd "M-g M-h") 'sp-backward-barf-sexp)

  ;; (define-key smartparens-mode-map (kbd "M-D") 'sp-splice-sexp)
  ;; (define-key smartparens-mode-map (kbd "C-M-<delete>") 'sp-splice-sexp-killing-forward)
  ;; (define-key smartparens-mode-map (kbd "C-M-<backspace>") 'sp-splice-sexp-killing-backward)
  ;; (define-key smartparens-mode-map (kbd "C-S-<backspace>") 'sp-splice-sexp-killing-around)

  ;; (define-key smartparens-mode-map (kbd "C-]") 'sp-select-next-thing-exchange)
  ;; (define-key smartparens-mode-map (kbd "C-<left_bracket>") 'sp-select-previous-thing)
  ;; (define-key smartparens-mode-map (kbd "C-M-]") 'sp-select-next-thing)

  ;; (define-key smartparens-mode-map (kbd "M-F") 'sp-forward-symbol)
  ;; (define-key smartparens-mode-map (kbd "M-B") 'sp-backward-symbol)

  ;; (define-key smartparens-mode-map (kbd "C-\"") 'sp-change-inner)
  ;; (define-key smartparens-mode-map (kbd "M-i") 'sp-change-enclosing)
#+END_SRC


Taken from
https://github.com/abo-abo/hydra/wiki/smartparens

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-smartparens (:hint nil)
    "
   Moving^^^^                       Slurp & Barf^^   Wrapping^^            Sexp juggling^^^^               Destructive
  ------------------------------------------------------------------------------------------------------------------------
   [_a_] beginning  [_n_] down      [_h_] bw slurp   [_R_]   rewrap        [_S_] split   [_t_] transpose   [_c_] change inner  [_w_] copy
   [_e_] end        [_N_] bw down   [_H_] bw barf    [_u_]   unwrap        [_s_] splice  [_A_] absorb      [_C_] change outer
   [_f_] forward    [_p_] up        [_l_] slurp      [_U_]   bw unwrap     [_r_] raise   [_E_] emit        [_k_] kill          [_g_] quit
   [_b_] backward   [_P_] bw up     [_L_] barf       [_(__{__[_] wrap (){}[]   [_j_] join    [_o_] convolute   [_K_] bw kill       [_q_] quit"
    ;; Moving
    ("a" sp-beginning-of-sexp)
    ("e" sp-end-of-sexp)
    ("f" sp-forward-sexp)
    ("b" sp-backward-sexp)
    ("n" sp-down-sexp)
    ("N" sp-backward-down-sexp)
    ("p" sp-up-sexp)
    ("P" sp-backward-up-sexp)

    ;; Slurping & barfing
    ("h" sp-backward-slurp-sexp)
    ("H" sp-backward-barf-sexp)
    ("l" sp-forward-slurp-sexp)
    ("L" sp-forward-barf-sexp)

    ;; Wrapping
    ("R" sp-rewrap-sexp)
    ("u" sp-unwrap-sexp)
    ("U" sp-backward-unwrap-sexp)
    ("(" sp-wrap-round)
    ("{" sp-wrap-curly)
    ("[" sp-wrap-square)

    ;; Sexp juggling
    ("S" sp-split-sexp)
    ("s" sp-splice-sexp)
    ("r" sp-raise-sexp)
    ("j" sp-join-sexp)
    ("t" sp-transpose-sexp)
    ("A" sp-absorb-sexp)
    ("E" sp-emit-sexp)
    ("o" sp-convolute-sexp)

    ;; Destructive editing
    ("c" sp-change-inner :exit t)
    ("C" sp-change-enclosing :exit t)
    ("k" sp-kill-sexp)
    ("K" sp-backward-kill-sexp)
    ("w" sp-copy-sexp)

    ("q" nil)
    ("g" nil))
#+END_SRC




** Undo

*** Add undo tree

The best documentation for =undo-tree= that I am aware of is obtained by using
the command =M-x describe-package RET undo-tree RET=.
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :init
    (global-undo-tree-mode))
#+END_SRC


** Yanking text

Bind =M-y= to =browse-kill-ring=.  See
https://github.com/browse-kill-ring/browse-kill-ring.
#+BEGIN_SRC emacs-lisp
  (use-package browse-kill-ring
    :config
    (browse-kill-ring-default-keybindings))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; create function which cycles forwards through the kill ring
(defun yank-pop-forwards (arg)
  (interactive "p")
  (yank-pop (- arg)))
;; bind key to previously defined function
(global-set-key (kbd "M-Y") 'yank-pop-forwards)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Properly indent yanked code (not yet tested!).  From:
;;
;;    https://www.emacswiki.org/emacs/AutoIndentation#toc3
;;
;; see https://emacs.wordpress.com/2007/01/22/killing-yanking-and-copying-lines/
;; for a copying function for possible later addition
(dolist (command '(yank yank-pop))
  (eval `(defadvice ,command (after indent-region activate)
           (and (not current-prefix-arg)
                (member major-mode '(emacs-lisp-mode lisp-mode
                                                     ess-mode        python-mode
                                                     c-mode          c++-mode
                                                     latex-mode      plain-tex-mode))
                (let ((mark-even-if-inactive transient-mark-mode))
                  (indent-region (region-beginning) (region-end) nil))))))
#+END_SRC

Search for non-ASCII characters in the buffer.  Useful when copying text from
PDFs or other places that can introduce non-ASCII characters.  See
https://www.emacswiki.org/emacs/FindingNonAsciiCharacters
#+BEGIN_SRC emacs-lisp
(defun occur-non-ascii ()
  "Find any non-ascii characters in the current buffer."
  (interactive)
  (occur "[^[:ascii:]]"))
#+END_SRC




** Multiple cursors

See https://github.com/magnars/multiple-cursors.el.

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :config
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
    (global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click))
#+END_SRC


Taken from
https://github.com/otijhuis/emacs.d/blob/master/config/hydra-settings.el

#+BEGIN_SRC emacs-lisp
  ;; Hydra - Multiple cursors
  (defhydra hydra-multiple-cursors (:columns 3
                                             :idle 1.0)
    "Multiple cursors"
    ("l" mc/edit-lines "Edit lines in region" :exit t)
    ("b" mc/edit-beginnings-of-lines "Edit beginnings of lines in region" :exit t)
    ("e" mc/edit-ends-of-lines "Edit ends of lines in region" :exit t)
    ("a" mc/mark-all-dwim "Mark all dwim" :exit t)
    ("S" mc/mark-all-symbols-like-this "Mark all symbols likes this" :exit t)
    ("w" mc/mark-all-words-like-this "Mark all words like this" :exit t)
    ("r" mc/mark-all-in-region "Mark all in region" :exit t)
    ("R" mc/mark-all-in-region-regexp "Mark all in region (regexp)" :exit t)
    ("d" mc/mark-all-like-this-in-defun "Mark all like this in defun" :exit t)
    ("s" mc/mark-all-symbols-like-this-in-defun "Mark all symbols like this in defun" :exit t)
    ("W" mc/mark-all-words-like-this-in-defun "Mark all words like this in defun" :exit t)
    ("i" mc/insert-numbers "Insert numbers" :exit t)
    ("n" mc/mark-next-like-this "Mark next like this")
    ("N" mc/skip-to-next-like-this "Skip to next like this")
    ("M-n" mc/unmark-next-like-this "Unmark next like this")
    ("p" mc/mark-previous-like-this "Mark previous like this")
    ("P" mc/skip-to-previous-like-this "Skip to previous like this")
    ("M-p" mc/unmark-previous-like-this "Unmark previous like this")
    ("q" nil "Quit" :exit t))
#+END_SRC


** iedit

#+BEGIN_SRC emacs-lisp
;; see https://github.com/victorhge/iedit
(use-package iedit
  :bind
  (("C-;" . nil)
   ("C-M-i" . iedit-mode)))
;; (global-set-key (kbd "C-M-i") 'iedit-mode)
#+END_SRC


** expand-region

Use ~C-- C-=~ to contract the region.  Magnars also claims that you can contract
the region by pressing =-= (the minus key), but this doesn't work for me (why?).
#+BEGIN_SRC emacs-lisp
  ;; https://github.com/magnars/expand-region.el

  (use-package expand-region
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC


Taken from https://github.com/otijhuis/emacs.d/blob/master/config/hydra-settings.el

#+BEGIN_SRC emacs-lisp
  ;; hydra - marking
  (defhydra hydra-mark (:exit t
                              :columns 3
                              :idle 1.0)
    "Mark"
    ("d" er/mark-defun "Defun / Function")
    ("f" er/mark-defun "Defun / Function")
    ("F" er/mark-clj-function-literal "Clj anonymous fn")
    ("w" er/mark-word "Word")
    ("W" er/mark-clj-word "CLJ word")
    ("u" er/mark-url "Url")
    ("e" mark-sexp "S-Expression")
    ("E" er/mark-email "Email")
    ("b" mark-whole-buffer "Buffer")
    ("p" er/mark-text-paragraph "Paragraph")
    ("r" er/mark-clj-regexp-literal "Clj regexp")
    ("s" er/mark-symbol "Symbol")
    ("S" er/mark-symbol-with-prefix "Prefixed symbol")
    ("q" er/mark-inside-quotes "Inside quotes")
    ("Q" er/mark-outside-quotes "Outside quotes")
    ("(" er/mark-inside-pairs "Inside pairs")
    ("[" er/mark-inside-pairs "Inside pairs")
    ("{" er/mark-inside-pairs "Inside pairs")
    (")" er/mark-outside-pairs "Outside pairs")
    ("]" er/mark-outside-pairs "Outside pairs")
    ("}" er/mark-outside-pairs "Outside pairs")
    ("t" er/mark-inner-tag "Inner tag")
    ("T" er/mark-outer-tag "Outer tag")
    ("c" er/mark-comment "Comment")
    ("a" er/mark-html-attribute "HTML attribute")
    ("." er/expand-region "Expand region" :exit nil)
    ("," er/contract-region "Contract region" :exit nil)
    ("#" er/mark-clj-set-literal "Clj set")
    )
#+END_SRC


** easy-kill

#+BEGIN_SRC emacs-lisp
(use-package easy-kill
  :ensure t
  :config
  (global-set-key [remap kill-ring-save] #'easy-kill)
  (global-set-key [remap mark-sexp] #'easy-mark))
#+END_SRC




* Org mode

** Org mode stuff

#+BEGIN_SRC emacs-lisp
  ;; save clock history across Emacs sessions.  See
  ;; https://orgmode.org/manual/Clocking-work-time.html
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)
  ;; add languages to babel
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)))
  ;; no need for confirmation before evaluating code blocks
  (setq org-confirm-babel-evaluate nil)
  ;; inserting graphical output
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
  (add-hook 'org-mode-hook 'org-display-inline-images)

  ;; see docstring for `org-latex-listings`
  (setq org-latex-listings t)
  (require 'ox-latex)
  (add-to-list 'org-latex-packages-alist '("" "listings"))
  ;; see docstring for `org-latex-default-packages-alist`.  Note that according to
  ;; a string (as opposed to the usual 3-list) is inserted "as-is" into the header
  ;; of the document
  (add-to-list 'org-latex-default-packages-alist "\\PassOptionsToPackage{fleqn}{amsmath}")
  (add-to-list 'org-latex-default-packages-alist "\\PassOptionsToPackage{hyphens}{url}")

  ;; fontify code in code blocks
  (setq org-src-fontify-natively t)
  ;; enable curly quotes when exporting files
  (setq org-export-with-smart-quotes t)

  ;; create a mapping from org mode Scheme code blocks to LaTeX listings Lisp
  (add-to-list 'org-latex-listings-langs '(scheme "Lisp"))

  ;; use CSS selectors instead of inline styles.  By default Org mode will use the
  ;; font colors from your theme, and this allows you to specify the font colors
  ;; of the export through a CSS file instead.
  (setq org-html-htmlize-output-type 'css)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map (kbd "C-M-i") nil)
#+END_SRC




* Ivy + counsel + swiper

TODO:

#+BEGIN_SRC emacs-lisp
  (use-package ivy)
  (use-package swiper)
  (use-package counsel)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; copied from https://github.com/abo-abo/swiper
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-M-s") 'swiper-all)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
;; (global-set-key (kbd "C-c g") 'counsel-git)
;; (global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+END_SRC




* Projects

** projectile

#+BEGIN_SRC emacs-lisp
;; see https://github.com/bbatsov/projectile and
;; https://projectile.readthedocs.io/en/latest/installation/
(use-package projectile
  :ensure t
  :config
  ;; (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1))
(setq projectile-switch-project-action #'projectile-dired)
(setq projectile-completion-system 'ivy)
#+END_SRC

Enable counsel projectile mode.  See
https://github.com/ericdanan/counsel-projectile/ for details.
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :config
    (counsel-projectile-mode))
#+END_SRC

Taken from
https://github.com/abo-abo/hydra/wiki/Projectile
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-projectile-other-window (:color teal)
    "projectile-other-window"
    ("f"  projectile-find-file-other-window        "file")
    ("g"  projectile-find-file-dwim-other-window   "file dwim")
    ("d"  projectile-find-dir-other-window         "dir")
    ("b"  projectile-switch-to-buffer-other-window "buffer")
    ("q"  nil                                      "cancel" :color blue))

  (defhydra hydra-projectile (:color teal
                                     :hint nil)
    "
       PROJECTILE: %(projectile-project-root)

       Find File            Search/Tags          Buffers                Cache
  ------------------------------------------------------------------------------------------
  _s-f_: file            _a_: ag                _i_: Ibuffer           _c_: cache clear
   _ff_: file dwim       _g_: update gtags      _b_: switch to buffer  _x_: remove known project
   _fd_: file curr dir   _o_: multi-occur     _s-k_: Kill all buffers  _X_: cleanup non-existing
    _r_: recent file                                               ^^^^_z_: cache current
    _d_: dir

  "
    ("a"   projectile-ag)
    ("b"   projectile-switch-to-buffer)
    ("c"   projectile-invalidate-cache)
    ("d"   projectile-find-dir)
    ("s-f" projectile-find-file)
    ("ff"  projectile-find-file-dwim)
    ("fd"  projectile-find-file-in-directory)
    ("g"   ggtags-update-tags)
    ("s-g" ggtags-update-tags)
    ("i"   projectile-ibuffer)
    ("K"   projectile-kill-buffers)
    ("s-k" projectile-kill-buffers)
    ("m"   projectile-multi-occur)
    ("o"   projectile-multi-occur)
    ("s-p" projectile-switch-project "switch project")
    ("p"   projectile-switch-project)
    ("s"   projectile-switch-project)
    ("r"   projectile-recentf)
    ("x"   projectile-remove-known-project)
    ("X"   projectile-cleanup-known-projects)
    ("z"   projectile-cache-current-file)
    ("`"   hydra-projectile-other-window/body "other window")
    ("q"   nil "cancel" :color blue))
#+END_SRC


** eyebrowse

Taken from
http://pragmaticemacs.com/emacs/easily-manage-emacs-workspaces-with-eyebrowse/.
Note: use =C-c C-w ,= to name the workspaces.
#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :config
    (define-key eyebrowse-mode-map (kbd "C-5") 'eyebrowse-switch-to-window-config-5)
    (define-key eyebrowse-mode-map (kbd "C-6") 'eyebrowse-switch-to-window-config-6)
    (define-key eyebrowse-mode-map (kbd "C-7") 'eyebrowse-switch-to-window-config-7)
    (define-key eyebrowse-mode-map (kbd "C-8") 'eyebrowse-switch-to-window-config-8)
    (eyebrowse-mode t)
    (setq eyebrowse-new-workspace t))
#+END_SRC




** tags

Currently I am using =ggtags= to handle tagging.  FIXME: not working!!



* Help files

#+BEGIN_SRC emacs-lisp
;; see https://github.com/justbur/emacs-which-key.  A useful command is
;; `which-key-show-major-mode` (similar to `C-h m`)
(use-package which-key
  :ensure t)
(which-key-mode)
(which-key-setup-side-window-bottom)
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :config
    ;; from https://github.com/Wilfred/helpful/
    (global-set-key (kbd "C-h f") #'helpful-callable)
    (global-set-key (kbd "C-h v") #'helpful-variable)
    (global-set-key (kbd "C-h k") #'helpful-key)
    ;; Lookup the current symbol at point. C-c C-d is a common keybinding
    ;; for this in lisp modes.
    (global-set-key (kbd "C-c C-d") #'helpful-at-point)
    ;; Look up *F*unctions (excludes macros).  By default, C-h F is bound to
    ;; `Info-goto-emacs-command-node`. Helpful already links to the manual, if a
    ;; function is referenced there.
    (global-set-key (kbd "C-h F") #'helpful-function)
    ;; Look up *C*ommands.  By default, C-h C is bound to describe
    ;; `describe-coding-system`. I don't find this very useful, but it's frequently
    ;; useful to only look at interactive functions.
    (global-set-key (kbd "C-h C") #'helpful-command))
#+END_SRC




* Major modes

** magit

magit settings
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (global-set-key (kbd "C-x g") 'magit-status)
    (global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
    (setq git-commit-summary-max-length 50))
#+END_SRC


** Emasc Speaks Statistics (ESS)

Note: sometimes it helps to use =R-initialize-on-start= when the documentation
isn't working.  See https://github.com/emacs-ess/ESS/issues/117.

Note: =M-x ess-display-package-index=, bound to =C-c C-d i= by default, gives
package index.


#+BEGIN_SRC emacs-lisp
  (use-package ess)

  ;; load Emacs Speaks Statistics
  (require 'ess-site)
  ;; (setq ess-smart-S-assign-key ";")

  ;; ESS hook additions.  Note that the duplicate calls to (ess-toggle-S-assign
  ;; nil) are correct: the first call clears the default `ess-smart-S-assign'
  ;; assignment and the second line re-assigns it to the customized setting.
  (add-hook 'ess-mode-hook
            (lambda ()
              (ess-set-style 'C++ 'quiet)                    ; recommended in R Internals man
              (setq ess-indent-with-fancy-comments nil)      ; disable ESS-style indentation
              (setq ess-smart-S-assign-key ";")  ; reassign ' <- ' to ';'
              (define-key ess-mode-map (kbd ";") 'ess-insert-assign)
              (define-key ess-mode-map (kbd "C-j") 'ess-eval-region-or-line-visibly-and-step)
              ;; (ess-toggle-S-assign nil)          ; removed due to https://stackoverflow.com/q/50954945
              ;; (ess-toggle-S-assign nil)          ; see above comment
              (setq-local comment-add 0)         ; so that comments are # not ##
              (setq ess-roxy-str "#'")           ; Roxygen comments are #' not ##'
              ;; (local-set-key (kbd "C-'") 'ess-switch-to-ESS)
              (local-set-key (kbd "C-S-m") (lambda () (interactive) (insert " %>% ")))
              (setq inferior-R-args "--no-restore --no-save ")
              ;; (add-hook 'local-write-file-hooks
              ;;        (lambda ()
              ;;          (ess-nuke-trailing-whitespace)))
              (setq ess-swv-processor 'knitr)                 ; weaver
              (setq ess-swv-pdflatex-commands '("pdflatex"))  ; LaTeX compiler
              ;; (setq ess-nuke-trailing-whitespace-p t)         ; strip trailing whitespace w/o query
              ;; (setq ess-sas-local-unix-keys t)                ; SAS keys, see section 13.5
              (setq ess-eval-visibly 'nowait)    ; don't hold Emacs while commands are run
              ))

  ;; use polymode for markdown and R
  (use-package poly-markdown
    :ensure t)
  (use-package poly-R
    :ensure t)
#+END_SRC


** Comint

#+BEGIN_SRC emacs-lisp
;; customize comint (command interpreter) settings, as described in the ESS
;; manual, section 4.3
(eval-after-load "comint"
   '(progn
      (define-key comint-mode-map [up]
        'comint-previous-matching-input-from-input)
      (define-key comint-mode-map [down]
        'comint-next-matching-input-from-input)
      ;; also recommended for ESS use --
      (setq comint-scroll-to-bottom-on-output 'others)
      (setq comint-scroll-show-maximum-output t)
      ;; somewhat extreme, almost disabling writing in *R*, *shell* buffers above prompt:
      (setq comint-scroll-to-bottom-on-input 'this)
      ))

;; allow color to work in shell.  See www.emacswiki.org/emacs/AnsiColor
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
(add-to-list 'comint-output-filter-functions 'ansi-color-process-output)
#+END_SRC


** LaTeX

#+BEGIN_SRC emacs-lisp
;; ignore text for syntax highlighting in Verbatim and lstlisting environments
;; http://tex.stackexchange.com/q/111289
;;
;; Note: I would like to put this in the LaTeX-mode hook, but it doesn't work there.  Why??
(setq LaTeX-verbatim-environments-local '("Verbatim" "lstlisting" "lstinline"))
(setq LaTeX-verbatim-macros-with-delims-local '("code"))
;; synctex minor mode additions.  See https://tex.stackexchange.com/a/49840/88779
(add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)  ; enable synctex minor mode
(setq TeX-source-correlate-start-server t)              ; automatically start server without asking
(add-hook 'LaTeX-mode-hook 'turn-on-flyspell)
;; AUCTeX hook additions
(add-hook 'LaTeX-mode-hook
          (lambda ()
            ;; Enable document parsing (first two commands, see Section 1.3 in docs)
            (setq TeX-auto-save t)
            (setq TeX-parse-self t)
            ;; indent after newline
            (setq TeX-newline-function 'newline-and-indent)
            ;; Make AUCTex aware of multi-file document structure
            (setq-default TeX-master nil)
            ;; ;; unset local keybinding.  Note that this isn't the proper way to
            ;; ;; do this, see the comment in
            ;; ;; https://stackoverflow.com/a/7598754/5518304
            ;; (define-key (LaTeX-mode-map "C-;" nil))
            ))

;; ;; below doesn't work right, what can be done?
;; (setq LaTeX-fill-excluded-macros '("lstinline" "index"))


;; ;; allows synctex and preview mode to work properly together.  See
;; ;; https://tex.stackexchange.com/a/94325/88779.
;; (defadvice TeX-view (around always-view-master-file activate)
;;   (let ((TeX-current-process-region-p nil))
;;     ad-do-it))
#+END_SRC


** pdf-tools

#+BEGIN_SRC emacs-lisp
;; taken from http://pragmaticemacs.com/emacs/more-pdf-tools-tweaks/
(use-package pdf-tools
  :pin manual ;; manually update
  :config
  ;; initialise
  (pdf-tools-install)
  ;; open pdfs scaled to fit page
  (setq-default pdf-view-display-size 'fit-page)
  ;; automatically annotate highlights
  (setq pdf-annot-activate-created-annotations t)
  ;; use normal isearch
  (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
  ;; more fine-grained zooming
  (setq pdf-view-resize-factor 1.1)
  ;; keyboard shortcuts
  (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
  (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
  (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete))

;; see the "Known problems" section at https://github.com/politza/pdf-tools for
;; the reason why this line is included
(add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
#+END_SRC



** slime

TODO: I think the slime installation is a little involved.


#+BEGIN_SRC emacs-lisp
  (use-package slime
    :config
    ;; slime settings
    (setq inferior-lisp-program (if (eq system-type 'darwin)
                                    "/usr/local/bin/sbcl"
                                  "/usr/bin/sbcl"))
    ;; also setup the slime-fancy contributed package
    (add-to-list 'slime-contribs 'slime-fancy)
    ;; use quicklisp's version of slime
    (load (expand-file-name "~/quicklisp/slime-helper.el")))
#+END_SRC



** geiser

geiser settings.  Inform geiser that the only Scheme implementation currently
installed is mit-scheme so that it doesn't try to guess the wrong Scheme for
buffers.  See http://www.nongnu.org/geiser/geiser_3.html#choosing_002dimpl.
#+BEGIN_SRC emacs-lisp
  (use-package geiser
    :config
    (setq geiser-active-implementations '(mit)))
#+END_SRC



** Python

Python settings
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :config
    (elpy-enable)
    (setq elpy-rpc-python-command "/usr/bin/python3")
    (setq python-shell-interpreter (expand-file-name "~/.local/bin/ipython")
          python-shell-interpreter-args "-i --simple-prompt"))

  ;; ;; enable autopep8 formatting on save
  ;; (require 'py-autopep8)
  ;; (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
#+END_SRC


** SQL

#+BEGIN_SRC emacs-lisp
;; for the MariaDB prompt to show up in the inferior process for SQL mode.  See
;; https://unix.stackexchange.com/a/297320/154101
(require 'sql)
(sql-set-product-feature 'mysql :prompt-regexp "^\\(MariaDB\\|MySQL\\) \\[[_a-zA-Z()]*\\]> ")
;; set defaults for mySQL login
(setq sql-mysql-login-params
      '((user :default "dpritch")
        (server :default "localhost")))
#+END_SRC

Use and configure =sqlup-mode=.
#+BEGIN_SRC emacs-lisp
  (use-package sqlup-mode
    :config
    ;; Capitalize keywords in SQL mode
    (add-hook 'sql-mode-hook 'sqlup-mode)
    ;; Capitalize keywords in an interactive session (e.g. psql)
    (add-hook 'sql-interactive-mode-hook 'sqlup-mode)
    ;; Set a global keyword to use sqlup on a region
    (global-set-key (kbd "C-c u") 'sqlup-capitalize-keywords-in-region))
#+END_SRC


** YAML

#+BEGIN_SRC emacs-lisp
;; prepend directories to load path
(add-to-list 'load-path "~/.emacs.d/other-packages/yaml")


;; add yaml-mode.  See https://github.com/yoshiki/yaml-mode
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.ya?ml\\'" . yaml-mode))
(add-hook 'yaml-mode-hook
          '(lambda ()
             (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
#+END_SRC


* Things to try (that are not yet in my configuration)

** Smart occur

The original command seems super useful: =M-s o= for =occur=.  Abo-abo has
created an enhanced version at https://oremacs.com/2015/01/26/occur-dwim/.

See
https://www.reddit.com/r/orgmode/comments/5elk0z/prevent_org_from_tangling_certain_sections/
for preventing tangling for the entire section.

#+BEGIN_SRC emacs-lisp :tangle no
(defun occur-dwim ()
  "Call `occur' with a sane default."
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (let ((sym (thing-at-point 'symbol)))
            (when (stringp sym)
              (regexp-quote sym))))
        regexp-history)
  (call-interactively 'occur))
#+END_SRC
